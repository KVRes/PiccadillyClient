syntax = "proto3";
package EventService;
option go_package = "./pb";

// 定义事件消息结构
message Event {
    int32 event_type = 1;
    string event_val = 2;
}

// 定义用于订阅的请求
message SubscribeRequest {
    string namespace = 1;
    string key = 2;
    int32 event_type = 3;
}

// 事件推送服务
service EventService {
    // 服务端流式 RPC，用于推送事件
    rpc SubscribeEvents(SubscribeRequest) returns (stream Event) {}
}


message SetRequest {
    string namespace = 1;
    string key = 2;
    string val = 3;
    optional int32 ttl = 4;
}

message DelRequest {
    string namespace = 1;
    string key = 2;
}

message GetRequest {
    string namespace = 1;
    string key = 2;
}

message KeysRequest {
    string namespace = 1;
}

message CRUDResponse {
    bool ok = 1;
    string val = 2;
}

message KeysResponse {
    bool ok = 1;
    repeated string keys = 2;
}

message Namespace {
    string namespace = 1;
}

message IntResponse {
    int32 val = 2;
}

message OkResponse {
    bool ok = 1;
}



// 事件存储服务
service CRUDService {
    rpc Set(SetRequest) returns (CRUDResponse) {}
    rpc Get(GetRequest) returns (CRUDResponse) {}
    rpc Del(DelRequest) returns (CRUDResponse) {}
    rpc Keys(KeysRequest) returns (KeysResponse) {}
    rpc Len(Namespace) returns (IntResponse){}
    rpc Clear(Namespace) returns (OkResponse) {}
}

enum ConnectionStrategy {
    FailIfNotExists = 0;
    CreateIfNotExists = 1;
}

enum ConcurrentModel {
    Linear = 0;
    NoLinear = 1;
}

message ConnectRequest {
    string namespace = 1;
    string token = 2; // reserved for future
    ConnectionStrategy strategy = 3;
    ConcurrentModel model = 4;
}

message ConnectResponse {
    bool ok = 1;
    bool created = 2;
    string namespace = 3;
}

message ListRequest {
    string namespace = 1;
}

message ListResponse {
    bool ok = 1;
    repeated string pnodes = 2;
}

message CreateRequest {
    string namespace = 1;
}

message CreateResponse {
    bool ok = 1;
}

service ManagerService {
    rpc Connect(ConnectRequest) returns (ConnectResponse) {}
    rpc List(ListRequest) returns (ListResponse) {}
    rpc Create(CreateRequest) returns (CreateResponse)  {}
}